// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ChittChat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChittChatServiceClient is the client API for ChittChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittChatServiceClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Repsonse, error)
}

type chittChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChittChatServiceClient(cc grpc.ClientConnInterface) ChittChatServiceClient {
	return &chittChatServiceClient{cc}
}

func (c *chittChatServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*Repsonse, error) {
	out := new(Repsonse)
	err := c.cc.Invoke(ctx, "/ChittyChat.ChittChatService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChittChatServiceServer is the server API for ChittChatService service.
// All implementations must embed UnimplementedChittChatServiceServer
// for forward compatibility
type ChittChatServiceServer interface {
	Publish(context.Context, *PublishRequest) (*Repsonse, error)
	mustEmbedUnimplementedChittChatServiceServer()
}

// UnimplementedChittChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChittChatServiceServer struct {
}

func (UnimplementedChittChatServiceServer) Publish(context.Context, *PublishRequest) (*Repsonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedChittChatServiceServer) mustEmbedUnimplementedChittChatServiceServer() {}

// UnsafeChittChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittChatServiceServer will
// result in compilation errors.
type UnsafeChittChatServiceServer interface {
	mustEmbedUnimplementedChittChatServiceServer()
}

func RegisterChittChatServiceServer(s grpc.ServiceRegistrar, srv ChittChatServiceServer) {
	s.RegisterService(&ChittChatService_ServiceDesc, srv)
}

func _ChittChatService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittChatServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyChat.ChittChatService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittChatServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChittChatService_ServiceDesc is the grpc.ServiceDesc for ChittChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChittChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyChat.ChittChatService",
	HandlerType: (*ChittChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ChittChatService_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ChittyChat/ChittyChat.proto",
}
